/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospital.information.system;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author leand
 */
public class Application extends javax.swing.JFrame {
    private DefaultTableModel tableModel;
    /**
     * Creates new form Home
     */
    public Application() throws SQLException {
        initComponents();
        myconnection ();
        CallableStatement callableStatement_Fill_Docotrs = dbConnection.prepareCall("{call GetAll_Doctors()}");
        callableStatement_Fill_Docotrs.execute();
        refreshTable(T_Doctors,  callableStatement_Fill_Docotrs);
        CallableStatement callableStatement_Fill_Patients = dbConnection.prepareCall("{call GetAll_patients()}");
        callableStatement_Fill_Patients.execute();
        refreshTable(T_Patients,  callableStatement_Fill_Patients);
        CallableStatement callableStatement_Fill_Appointments = dbConnection.prepareCall("{call getall_appointments()}");
        callableStatement_Fill_Appointments.execute();
        refreshTable(T_Appointments,  callableStatement_Fill_Appointments);
        CallableStatement callableStatement_Fill_Prescriptions = dbConnection.prepareCall("{call GetAll_prescriptions()}");
        callableStatement_Fill_Prescriptions.execute();
        refreshTable(T_Prescriptions,  callableStatement_Fill_Prescriptions);
        CallableStatement callableStatement_Fill_Rooms = dbConnection.prepareCall("{call GetAll_rooms()}");
        callableStatement_Fill_Rooms.execute();
        refreshTable(T_Rooms,  callableStatement_Fill_Rooms);
        CallableStatement callableStatement_Fill_Docotr_Log = dbConnection.prepareCall("{ call getall_doctors_audit() }");
        callableStatement_Fill_Docotr_Log.execute();
        refreshTable(Log_Table, callableStatement_Fill_Docotr_Log); 
        fillComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AboutDialog = new javax.swing.JDialog();
        jScrollPane8 = new javax.swing.JScrollPane();
        AboutTextArea = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Docotor_Panel = new javax.swing.JPanel();
        Insert_Doctor_B = new javax.swing.JButton();
        Edit_Doctor_B = new javax.swing.JButton();
        Delete_Doctor_B = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        T_Doctors = new javax.swing.JTable();
        Refresh_D = new javax.swing.JButton();
        Patient_Panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        T_Patients = new javax.swing.JTable();
        Insert_Patient_B = new javax.swing.JButton();
        Edit_Petient_B = new javax.swing.JButton();
        Delete_Petient_B = new javax.swing.JButton();
        Refresh_P = new javax.swing.JButton();
        Appointment_Panel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        T_Appointments = new javax.swing.JTable();
        Insert_Appointment_B = new javax.swing.JButton();
        Edit_Appointment_B = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Refrech_Appointment = new javax.swing.JButton();
        Prescription_Panel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        T_Prescriptions = new javax.swing.JTable();
        Insert_Prescription_B = new javax.swing.JButton();
        Edit_Prescription_B = new javax.swing.JButton();
        Delete_Prescription_B = new javax.swing.JButton();
        Refrech_Prescription = new javax.swing.JButton();
        Room_Panel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        T_Rooms = new javax.swing.JTable();
        Insert_Room_B = new javax.swing.JButton();
        Edit_Room_B = new javax.swing.JButton();
        Delete_Room_B = new javax.swing.JButton();
        Refrech_Room = new javax.swing.JButton();
        Query_Panel = new javax.swing.JPanel();
        CB_Speciality = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CB_years_of_experience = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        CB_age = new javax.swing.JComboBox<>();
        CB_gender = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        TQuery_results = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        CBAppointment_type = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        CBFollow_up = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        CBInsurance = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        CBFrequency = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        CBRoom_type = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        CBRoom_condition = new javax.swing.JComboBox<>();
        Log_Panel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        Log_Table = new javax.swing.JTable();
        Doctor_Log = new javax.swing.JButton();
        Room_Log = new javax.swing.JButton();
        Patient_Log = new javax.swing.JButton();
        Appointment_Log = new javax.swing.JButton();
        Prescription_Log = new javax.swing.JButton();
        B_About = new javax.swing.JButton();

        AboutDialog.setTitle("Σχετικά με");

        AboutTextArea.setColumns(20);
        AboutTextArea.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AboutTextArea.setRows(5);
        AboutTextArea.setText("Η εφαρμογή αυτή υλοποιήθηκε\nαπο τον Παναγιωτίδη Λέανδρο 2023\n\nemail: \nleandrospanagiotidis@gmail.com");
        jScrollPane8.setViewportView(AboutTextArea);

        javax.swing.GroupLayout AboutDialogLayout = new javax.swing.GroupLayout(AboutDialog.getContentPane());
        AboutDialog.getContentPane().setLayout(AboutDialogLayout);
        AboutDialogLayout.setHorizontalGroup(
            AboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AboutDialogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AboutDialogLayout.setVerticalGroup(
            AboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(2498, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hospital information system");

        Insert_Doctor_B.setText(" Εισαγωγή");
        Insert_Doctor_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_Doctor_BActionPerformed(evt);
            }
        });

        Edit_Doctor_B.setText("Tροποποίηση");
        Edit_Doctor_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_Doctor_BActionPerformed(evt);
            }
        });

        Delete_Doctor_B.setText("Διαγραφή");
        Delete_Doctor_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_Doctor_BActionPerformed(evt);
            }
        });

        T_Doctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(T_Doctors);

        Refresh_D.setText("Ανανέωση ");
        Refresh_D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_DActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Docotor_PanelLayout = new javax.swing.GroupLayout(Docotor_Panel);
        Docotor_Panel.setLayout(Docotor_PanelLayout);
        Docotor_PanelLayout.setHorizontalGroup(
            Docotor_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Docotor_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Docotor_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(Docotor_PanelLayout.createSequentialGroup()
                        .addComponent(Insert_Doctor_B)
                        .addGap(18, 18, 18)
                        .addComponent(Edit_Doctor_B)
                        .addGap(18, 18, 18)
                        .addComponent(Delete_Doctor_B)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Refresh_D)))
                .addContainerGap())
        );
        Docotor_PanelLayout.setVerticalGroup(
            Docotor_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Docotor_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Docotor_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Delete_Doctor_B)
                    .addComponent(Insert_Doctor_B)
                    .addComponent(Edit_Doctor_B)
                    .addComponent(Refresh_D))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Γιατροί ", Docotor_Panel);

        T_Patients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(T_Patients);

        Insert_Patient_B.setText(" Εισαγωγή");
        Insert_Patient_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_Patient_BActionPerformed(evt);
            }
        });

        Edit_Petient_B.setText("Tροποποίηση");
        Edit_Petient_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_Petient_BActionPerformed(evt);
            }
        });

        Delete_Petient_B.setText("Διαγραφή");
        Delete_Petient_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_Petient_BActionPerformed(evt);
            }
        });

        Refresh_P.setText("Ανανέωση ");
        Refresh_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_PActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Patient_PanelLayout = new javax.swing.GroupLayout(Patient_Panel);
        Patient_Panel.setLayout(Patient_PanelLayout);
        Patient_PanelLayout.setHorizontalGroup(
            Patient_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Patient_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Patient_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Patient_PanelLayout.createSequentialGroup()
                        .addComponent(Insert_Patient_B)
                        .addGap(18, 18, 18)
                        .addComponent(Edit_Petient_B)
                        .addGap(18, 18, 18)
                        .addComponent(Delete_Petient_B)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Refresh_P))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        Patient_PanelLayout.setVerticalGroup(
            Patient_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Patient_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Patient_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Insert_Patient_B)
                    .addComponent(Edit_Petient_B)
                    .addComponent(Delete_Petient_B)
                    .addComponent(Refresh_P))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ασθενείς ", Patient_Panel);

        T_Appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(T_Appointments);

        Insert_Appointment_B.setText(" Εισαγωγή");
        Insert_Appointment_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_Appointment_BActionPerformed(evt);
            }
        });

        Edit_Appointment_B.setText("Tροποποίηση");
        Edit_Appointment_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_Appointment_BActionPerformed(evt);
            }
        });

        jButton3.setText("Διαγραφή");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        Refrech_Appointment.setText("Ανανέωση ");
        Refrech_Appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refrech_AppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Appointment_PanelLayout = new javax.swing.GroupLayout(Appointment_Panel);
        Appointment_Panel.setLayout(Appointment_PanelLayout);
        Appointment_PanelLayout.setHorizontalGroup(
            Appointment_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Appointment_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Appointment_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(Appointment_PanelLayout.createSequentialGroup()
                        .addComponent(Insert_Appointment_B)
                        .addGap(18, 18, 18)
                        .addComponent(Edit_Appointment_B)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Refrech_Appointment)))
                .addContainerGap())
        );
        Appointment_PanelLayout.setVerticalGroup(
            Appointment_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Appointment_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Appointment_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Insert_Appointment_B)
                    .addComponent(Edit_Appointment_B)
                    .addComponent(jButton3)
                    .addComponent(Refrech_Appointment))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ραντεβού ", Appointment_Panel);

        T_Prescriptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(T_Prescriptions);

        Insert_Prescription_B.setText(" Εισαγωγή");
        Insert_Prescription_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_Prescription_BActionPerformed(evt);
            }
        });

        Edit_Prescription_B.setText("Tροποποίηση");
        Edit_Prescription_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_Prescription_BActionPerformed(evt);
            }
        });

        Delete_Prescription_B.setText("Διαγραφή");
        Delete_Prescription_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_Prescription_BActionPerformed(evt);
            }
        });

        Refrech_Prescription.setText("Ανανέωση ");
        Refrech_Prescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refrech_PrescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Prescription_PanelLayout = new javax.swing.GroupLayout(Prescription_Panel);
        Prescription_Panel.setLayout(Prescription_PanelLayout);
        Prescription_PanelLayout.setHorizontalGroup(
            Prescription_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Prescription_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Prescription_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(Prescription_PanelLayout.createSequentialGroup()
                        .addComponent(Insert_Prescription_B)
                        .addGap(18, 18, 18)
                        .addComponent(Edit_Prescription_B)
                        .addGap(18, 18, 18)
                        .addComponent(Delete_Prescription_B)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Refrech_Prescription)))
                .addContainerGap())
        );
        Prescription_PanelLayout.setVerticalGroup(
            Prescription_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Prescription_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Prescription_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Insert_Prescription_B)
                    .addComponent(Edit_Prescription_B)
                    .addComponent(Delete_Prescription_B)
                    .addComponent(Refrech_Prescription))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Συνταγές ", Prescription_Panel);

        T_Rooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(T_Rooms);

        Insert_Room_B.setText(" Εισαγωγή");
        Insert_Room_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_Room_BActionPerformed(evt);
            }
        });

        Edit_Room_B.setText("Tροποποίηση");
        Edit_Room_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_Room_BActionPerformed(evt);
            }
        });

        Delete_Room_B.setText("Διαγραφή");
        Delete_Room_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_Room_BActionPerformed(evt);
            }
        });

        Refrech_Room.setText("Ανανέωση ");
        Refrech_Room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refrech_RoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Room_PanelLayout = new javax.swing.GroupLayout(Room_Panel);
        Room_Panel.setLayout(Room_PanelLayout);
        Room_PanelLayout.setHorizontalGroup(
            Room_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Room_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Room_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(Room_PanelLayout.createSequentialGroup()
                        .addComponent(Insert_Room_B)
                        .addGap(18, 18, 18)
                        .addComponent(Edit_Room_B)
                        .addGap(18, 18, 18)
                        .addComponent(Delete_Room_B)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Refrech_Room)))
                .addContainerGap())
        );
        Room_PanelLayout.setVerticalGroup(
            Room_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Room_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Room_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Insert_Room_B)
                    .addComponent(Edit_Room_B)
                    .addComponent(Delete_Room_B)
                    .addComponent(Refrech_Room))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Δωμάτια", Room_Panel);

        CB_Speciality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_SpecialityActionPerformed(evt);
            }
        });

        jLabel1.setText("Επέλεξε ειδικότητα γιατρού");

        jLabel2.setText("Επέλεξε χρόνια εμπειρίας γιατρού");

        CB_years_of_experience.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_years_of_experienceActionPerformed(evt);
            }
        });

        jLabel3.setText("Επέλεξε ηλικίες ασθενών");

        jLabel4.setText("Επέλεξε φύλο ασθενών");

        CB_age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_ageActionPerformed(evt);
            }
        });

        CB_gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_genderActionPerformed(evt);
            }
        });

        TQuery_results.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TQuery_results);

        jLabel5.setText("Επέλεξε τύπο ραντεβού");

        CBAppointment_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBAppointment_typeActionPerformed(evt);
            }
        });

        jLabel6.setText("Επέλεξε αν χρειάζεται παρακολούθηση ο ασθενής");

        CBFollow_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBFollow_upActionPerformed(evt);
            }
        });

        jLabel7.setText("Επέλεξε αν καλύπτει η ασφάλεια του ασθενή ");

        CBInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBInsuranceActionPerformed(evt);
            }
        });

        jLabel8.setText("Επέλεξε συχνότητα χορήγησης φαρμάκου");

        CBFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBFrequencyActionPerformed(evt);
            }
        });

        jLabel9.setText("Επέλεξε τύπο δωματίου ");

        CBRoom_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBRoom_typeActionPerformed(evt);
            }
        });

        jLabel10.setText("Επέλεξε κατάσταση δωματίου");

        CBRoom_condition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBRoom_conditionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Query_PanelLayout = new javax.swing.GroupLayout(Query_Panel);
        Query_Panel.setLayout(Query_PanelLayout);
        Query_PanelLayout.setHorizontalGroup(
            Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Query_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                    .addGroup(Query_PanelLayout.createSequentialGroup()
                        .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CBRoom_condition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CBRoom_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CBFrequency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CBInsurance, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CBFollow_up, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CBAppointment_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CB_gender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CB_age, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CB_years_of_experience, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CB_Speciality, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        Query_PanelLayout.setVerticalGroup(
            Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Query_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CB_Speciality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CB_years_of_experience, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CB_age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(CB_gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(CBAppointment_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(CBFollow_up, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(CBInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(CBFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(CBRoom_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Query_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(CBRoom_condition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ερωτήματα", Query_Panel);

        Log_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(Log_Table);

        Doctor_Log.setText("Γιατροί");
        Doctor_Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Doctor_LogActionPerformed(evt);
            }
        });

        Room_Log.setText("Δωμάτια");
        Room_Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Room_LogActionPerformed(evt);
            }
        });

        Patient_Log.setText("Ασθενείς ");
        Patient_Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Patient_LogActionPerformed(evt);
            }
        });

        Appointment_Log.setText("Ραντεβού ");
        Appointment_Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Appointment_LogActionPerformed(evt);
            }
        });

        Prescription_Log.setText("Συνταγές ");
        Prescription_Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Prescription_LogActionPerformed(evt);
            }
        });

        B_About.setText("Σχετικά με ");
        B_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_AboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Log_PanelLayout = new javax.swing.GroupLayout(Log_Panel);
        Log_Panel.setLayout(Log_PanelLayout);
        Log_PanelLayout.setHorizontalGroup(
            Log_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Log_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Log_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Log_PanelLayout.createSequentialGroup()
                        .addComponent(Doctor_Log)
                        .addGap(18, 18, 18)
                        .addComponent(Patient_Log)
                        .addGap(18, 18, 18)
                        .addComponent(Appointment_Log)
                        .addGap(18, 18, 18)
                        .addComponent(Prescription_Log)
                        .addGap(18, 18, 18)
                        .addComponent(Room_Log)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                        .addComponent(B_About))
                    .addComponent(jScrollPane6))
                .addContainerGap())
        );
        Log_PanelLayout.setVerticalGroup(
            Log_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Log_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Log_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Doctor_Log)
                    .addComponent(Room_Log)
                    .addComponent(Patient_Log)
                    .addComponent(Appointment_Log)
                    .addComponent(Prescription_Log)
                    .addComponent(B_About))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ιστορικό", Log_Panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Tab2 ");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Insert_Doctor_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_Doctor_BActionPerformed
    Insert_Doctor insertDoctorFrame = new Insert_Doctor();
    insertDoctorFrame.setVisible(true);
    }//GEN-LAST:event_Insert_Doctor_BActionPerformed

    private void Edit_Doctor_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_Doctor_BActionPerformed
    Edit_Doctor editDoctorFrame = new Edit_Doctor();
    editDoctorFrame.setVisible(true);
    }//GEN-LAST:event_Edit_Doctor_BActionPerformed

    private void Delete_Doctor_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_Doctor_BActionPerformed
    Delete_Doctor deleteDoctorFrame = new Delete_Doctor();
    deleteDoctorFrame.setVisible(true);
    }//GEN-LAST:event_Delete_Doctor_BActionPerformed

    private void Refresh_DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_DActionPerformed
        try {
            CallableStatement callableStatement = dbConnection.prepareCall("{call getall_doctors()}");
            callableStatement.execute();
            refreshTable(T_Doctors,callableStatement);
            callableStatement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Refresh_DActionPerformed

    private void Insert_Patient_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_Patient_BActionPerformed
    Insert_Patient insertPatientFrame = new Insert_Patient();
    insertPatientFrame.setVisible(true);
    }//GEN-LAST:event_Insert_Patient_BActionPerformed

    private void Refresh_PActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_PActionPerformed
        try {
            CallableStatement callableStatement = dbConnection.prepareCall("{call GetAll_patients()}");
            callableStatement.execute();
            refreshTable(T_Patients,callableStatement);
            callableStatement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Refresh_PActionPerformed

    private void Delete_Petient_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_Petient_BActionPerformed
    Delete_Patient deletePatientFrame = new Delete_Patient();
    deletePatientFrame.setVisible(true);
    }//GEN-LAST:event_Delete_Petient_BActionPerformed

    private void Edit_Petient_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_Petient_BActionPerformed
    Edit_Patient editPatientFrame = new Edit_Patient();
    editPatientFrame.setVisible(true);
    }//GEN-LAST:event_Edit_Petient_BActionPerformed

    private void Insert_Appointment_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_Appointment_BActionPerformed
    Insert_Appointment insertAppointmentFrame = new Insert_Appointment();
    insertAppointmentFrame.setVisible(true);
    }//GEN-LAST:event_Insert_Appointment_BActionPerformed

    private void Refrech_AppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refrech_AppointmentActionPerformed
        try {
            CallableStatement callableStatement = dbConnection.prepareCall("{call getall_appointments()}");
            callableStatement.execute();
            refreshTable(T_Appointments,callableStatement);
            callableStatement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_Refrech_AppointmentActionPerformed

    private void Edit_Appointment_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_Appointment_BActionPerformed
    Edit_Appointment editAppointmentFrame = new Edit_Appointment();
    editAppointmentFrame.setVisible(true);
    }//GEN-LAST:event_Edit_Appointment_BActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    Delete_Appointment deleteAppointmenttFrame = new Delete_Appointment();
    deleteAppointmenttFrame.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void Insert_Prescription_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_Prescription_BActionPerformed
    Insert_Prescription insertPrescriptionFrame = new Insert_Prescription();
    insertPrescriptionFrame.setVisible(true);
    }//GEN-LAST:event_Insert_Prescription_BActionPerformed

    private void Refrech_PrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refrech_PrescriptionActionPerformed
        try {
            CallableStatement callableStatement = dbConnection.prepareCall("{call GetAll_Prescriptions()}");
            callableStatement.execute();
            refreshTable(T_Prescriptions,callableStatement);
            callableStatement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Refrech_PrescriptionActionPerformed

    private void Edit_Prescription_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_Prescription_BActionPerformed
    Edit_Prescription editPrescriptionFrame = new Edit_Prescription();
    editPrescriptionFrame.setVisible(true);
    }//GEN-LAST:event_Edit_Prescription_BActionPerformed

    private void Delete_Prescription_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_Prescription_BActionPerformed
    Delete_Prescription deletePrescriptionttFrame = new Delete_Prescription();
    deletePrescriptionttFrame.setVisible(true);
    }//GEN-LAST:event_Delete_Prescription_BActionPerformed

    private void Insert_Room_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_Room_BActionPerformed
    Insert_Room insertRoomFrame = new Insert_Room();
    insertRoomFrame.setVisible(true);
    }//GEN-LAST:event_Insert_Room_BActionPerformed

    private void Edit_Room_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_Room_BActionPerformed
    Edit_Room editRoomFrame = new Edit_Room();
    editRoomFrame.setVisible(true);
    }//GEN-LAST:event_Edit_Room_BActionPerformed

    private void Delete_Room_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_Room_BActionPerformed
    Delete_Room deleteRoomtFrame = new Delete_Room();
    deleteRoomtFrame.setVisible(true);
    }//GEN-LAST:event_Delete_Room_BActionPerformed

    private void Refrech_RoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refrech_RoomActionPerformed
        try {
            CallableStatement callableStatement = dbConnection.prepareCall("{call GetAll_rooms()}");
            callableStatement.execute();
            refreshTable(T_Rooms,callableStatement);
            callableStatement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_Refrech_RoomActionPerformed

    private void Doctor_LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Doctor_LogActionPerformed
try {
    DefaultTableModel model = (DefaultTableModel) Log_Table.getModel();
    model.setRowCount(0); 
    CallableStatement callableStatement = dbConnection.prepareCall("{ call getall_doctors_audit() }");
    callableStatement.execute();
    refreshTable(Log_Table, callableStatement); 

} catch (SQLException ex) {
    ex.printStackTrace();
}
    }//GEN-LAST:event_Doctor_LogActionPerformed

    private void Patient_LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Patient_LogActionPerformed
try {
    DefaultTableModel model = (DefaultTableModel) Log_Table.getModel();
    model.setRowCount(0); 
    model.setColumnCount(0);
    CallableStatement callableStatement = dbConnection.prepareCall("{ call getall_patient_audit() }");
    callableStatement.execute();
    refreshTable(Log_Table, callableStatement); 

} catch (SQLException ex) {
    ex.printStackTrace();
}
    }//GEN-LAST:event_Patient_LogActionPerformed

    private void Appointment_LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Appointment_LogActionPerformed
try {
    DefaultTableModel model = (DefaultTableModel) Log_Table.getModel();
    model.setRowCount(0); 
    CallableStatement callableStatement = dbConnection.prepareCall("{ call getall_appointments_audit() }");
    callableStatement.execute();
    refreshTable(Log_Table, callableStatement); 

} catch (SQLException ex) {
    ex.printStackTrace();
}
    }//GEN-LAST:event_Appointment_LogActionPerformed

    private void Prescription_LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Prescription_LogActionPerformed
try {
    DefaultTableModel model = (DefaultTableModel) Log_Table.getModel();
    model.setRowCount(0); 
    CallableStatement callableStatement = dbConnection.prepareCall("{ call getall_prescription_audit() }");
    callableStatement.execute();
    refreshTable(Log_Table, callableStatement); 

} catch (SQLException ex) {
    ex.printStackTrace();
}
    }//GEN-LAST:event_Prescription_LogActionPerformed

    private void Room_LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Room_LogActionPerformed
try {
    DefaultTableModel model = (DefaultTableModel) Log_Table.getModel();
    model.setRowCount(0); 
    CallableStatement callableStatement = dbConnection.prepareCall("{ call getall_room_audit() }");
    callableStatement.execute();
    refreshTable(Log_Table, callableStatement); 

    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_Room_LogActionPerformed

    private void CB_SpecialityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_SpecialityActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetDoctorsBySpecialty(?)}");
        fillTableQuery(CB_Speciality,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }  
    }//GEN-LAST:event_CB_SpecialityActionPerformed

    private void CB_years_of_experienceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_years_of_experienceActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetDoctorsByExperience(?)}");
        fillTableQuery(CB_years_of_experience,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CB_years_of_experienceActionPerformed

    private void CB_ageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_ageActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetPatientsByAge(?)}");
        fillTableQuery(CB_age,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CB_ageActionPerformed

    private void CB_genderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_genderActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetPatientsByGender(?)}");
        fillTableQuery(CB_gender,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CB_genderActionPerformed

    private void CBAppointment_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBAppointment_typeActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetAppointmentssByType(?)}");
        fillTableQuery(CBAppointment_type,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CBAppointment_typeActionPerformed

    private void CBFollow_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBFollow_upActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetAppointmentssByFollowUpRequired(?)}");
        fillTableQuery(CBFollow_up,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CBFollow_upActionPerformed

    private void CBInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBInsuranceActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetprescriptionsByInsurance(?)}");
        fillTableQuery(CBInsurance,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CBInsuranceActionPerformed

    private void CBFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBFrequencyActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetprescriptionsByFrequency(?)}");
        fillTableQuery(CBFrequency,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CBFrequencyActionPerformed

    private void CBRoom_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBRoom_typeActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetroomsByType(?)}");
        fillTableQuery(CBRoom_type,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CBRoom_typeActionPerformed

    private void B_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_AboutActionPerformed
        AboutDialog.setVisible(true);
        AboutDialog.setSize(450,220);
    }//GEN-LAST:event_B_AboutActionPerformed

    private void CBRoom_conditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBRoom_conditionActionPerformed
        try {
        CallableStatement callableStatement = dbConnection.prepareCall("{call GetroomsByCondition(?)}");
        fillTableQuery(CBRoom_condition,callableStatement );
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
    }//GEN-LAST:event_CBRoom_conditionActionPerformed
    
        void myconnection () {
       try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
       }
        
        
        
private void refreshTable(JTable table, CallableStatement callableStatement) {
    DefaultTableModel model = new DefaultTableModel();
    try {
        // Fetch data from the database using the provided select query
        ResultSet resultSet = callableStatement.getResultSet();

        // Create the table model and populate it with data
        ResultSetMetaData metaData = resultSet.getMetaData();
        int columnCount = metaData.getColumnCount();
        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
            model.addColumn(metaData.getColumnName(columnIndex));
        }
        while (resultSet.next()) {
            Object[] rowData = new Object[columnCount];
            for (int i = 0; i < columnCount; i++) {
                rowData[i] = resultSet.getObject(i + 1);
            }
            model.addRow(rowData);
        }

        // Set the updated model to the provided JTable component
        table.setModel(model);

    } catch (SQLException ex) {
        // Handle SQLException
        ex.printStackTrace();
    }
}

    void fillTableQuery(JComboBox comboBox, CallableStatement callableStatement){
    DefaultTableModel model = (DefaultTableModel) TQuery_results.getModel();
    model.setColumnCount(0);
    model.setRowCount(0);
    String selectedValue = String.valueOf(comboBox.getSelectedItem());
    try {
        callableStatement.setString(1, selectedValue);
        ResultSet rs = callableStatement.executeQuery();
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount(); 
        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
            model.addColumn(metaData.getColumnName(columnIndex));
        }
        while(rs.next()) {
            Object[] rowData = new Object[columnCount];
            for (int i = 0; i < columnCount; i++) {
                rowData[i] = rs.getObject(i + 1);
            }
            model.addRow(rowData);
        }
        
        if (model.getRowCount() == 0 && rs.isBeforeFirst()) {
            JOptionPane.showMessageDialog(null, "no data", 
                    "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            System.out.println("no data");
        }
    } catch(SQLException ex) {
        System.out.println("\n -- SQL Exception --- \n");
        while(ex != null) {
            System.out.println("Message: " + ex.getMessage());
            ex = ex.getNextException();
        }
    }    
    }
    
    void fillComboBox(){
        for (String specialty : specialties) {
            CB_Speciality.addItem(specialty);
        }
        for (String years_of_experience : years_of_expierience) {
            CB_years_of_experience.addItem(years_of_experience);
        }
        for (String age : age) {
            CB_age.addItem(age);
        }
        for (String gender : gender) {
            CB_gender.addItem(gender);
        }
        for (String appointment_types : appointment_types) {
            CBAppointment_type.addItem(appointment_types);
        }     
        for (String Y_N : Y_N) {
            CBFollow_up.addItem(Y_N);
        }  
        for (String Y_N : Y_N) {
            CBInsurance.addItem(Y_N);
        }  
        for (String frequency : frequency) {
            CBFrequency.addItem(frequency);
        }     
        for (String type : type) {
            CBRoom_type.addItem(type);
        }    
        for (String condition : condition) {
            CBRoom_condition.addItem(condition);
        }            
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Application().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    static ResultSet rs	= null;
    String[] type = {"Single" ,"Double" ,"ICU"};
    String[] condition = {"Cleaned" ,"Requires maintenance"};    
    String[] frequency = {"3 days/week" ,"7 days/week" ,"14 days/week"};
    String[] Y_N = {"Y", "N"};
    String[] appointment_types = {"Check up", "Follow up"};
    String[] specialties = {"Orthopedics", "Pediatrics", "Cardiology"};
    String[] years_of_expierience = {"<5", "5-10", ">10"};
    String[] age = {"<18", "18-65", ">65"};
    String[] gender = {"M", "F"};        
    static String     driverClassName = "org.postgresql.Driver" ;
    static String     url = "jdbc:postgresql://dblabs.it.teithe.gr:5432/iee2020246" ;
    static Connection dbConnection = null;
    static String     username = "iee2020246";
    static String     passwd = "Lp951753!";
    static PreparedStatement  statement       = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog AboutDialog;
    private javax.swing.JTextArea AboutTextArea;
    private javax.swing.JButton Appointment_Log;
    private javax.swing.JPanel Appointment_Panel;
    private javax.swing.JButton B_About;
    private javax.swing.JComboBox<String> CBAppointment_type;
    private javax.swing.JComboBox<String> CBFollow_up;
    private javax.swing.JComboBox<String> CBFrequency;
    private javax.swing.JComboBox<String> CBInsurance;
    private javax.swing.JComboBox<String> CBRoom_condition;
    private javax.swing.JComboBox<String> CBRoom_type;
    private javax.swing.JComboBox<String> CB_Speciality;
    private javax.swing.JComboBox<String> CB_age;
    private javax.swing.JComboBox<String> CB_gender;
    private javax.swing.JComboBox<String> CB_years_of_experience;
    private javax.swing.JButton Delete_Doctor_B;
    private javax.swing.JButton Delete_Petient_B;
    private javax.swing.JButton Delete_Prescription_B;
    private javax.swing.JButton Delete_Room_B;
    private javax.swing.JPanel Docotor_Panel;
    private javax.swing.JButton Doctor_Log;
    private javax.swing.JButton Edit_Appointment_B;
    private javax.swing.JButton Edit_Doctor_B;
    private javax.swing.JButton Edit_Petient_B;
    private javax.swing.JButton Edit_Prescription_B;
    private javax.swing.JButton Edit_Room_B;
    private javax.swing.JButton Insert_Appointment_B;
    private javax.swing.JButton Insert_Doctor_B;
    private javax.swing.JButton Insert_Patient_B;
    private javax.swing.JButton Insert_Prescription_B;
    private javax.swing.JButton Insert_Room_B;
    private javax.swing.JPanel Log_Panel;
    private javax.swing.JTable Log_Table;
    private javax.swing.JButton Patient_Log;
    private javax.swing.JPanel Patient_Panel;
    private javax.swing.JButton Prescription_Log;
    private javax.swing.JPanel Prescription_Panel;
    private javax.swing.JPanel Query_Panel;
    private javax.swing.JButton Refrech_Appointment;
    private javax.swing.JButton Refrech_Prescription;
    private javax.swing.JButton Refrech_Room;
    private javax.swing.JButton Refresh_D;
    private javax.swing.JButton Refresh_P;
    private javax.swing.JButton Room_Log;
    private javax.swing.JPanel Room_Panel;
    private javax.swing.JTable TQuery_results;
    private javax.swing.JTable T_Appointments;
    private javax.swing.JTable T_Doctors;
    private javax.swing.JTable T_Patients;
    private javax.swing.JTable T_Prescriptions;
    private javax.swing.JTable T_Rooms;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

}
